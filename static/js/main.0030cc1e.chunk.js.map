{"version":3,"sources":["serviceWorker.ts","theme.ts","contexts/DiceContext.tsx","components/Die/Die.tsx","components/RollDice.tsx","components/Nav.tsx","components/History.tsx","App.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","customTheme","theme","fonts","heading","body","mono","sides","getRollDiceValues","count","Array","from","length","Math","floor","random","initialDice","initialState","dice","roll","setCount","isRolling","history","DiceContext","createContext","state","DiceProvider","props","useState","setIsRolling","setHistory","setDice","Provider","value","newDice","map","h","setTimeout","children","library","add","faDiceOne","faDiceTwo","faDiceThree","faDiceFour","faDiceFive","faDiceSix","Die","useContext","className","icon","face","size","RollDice","Flex","align","justify","wrap","dieFace","index","Box","key","p","Button","variantColor","onClick","isLoading","loadingText","Nav","display","alignItems","justifyContent","gridGap","gridAutoFlow","Text","fontSize","fontWeight","textAlign","Input","id","type","min","max","width","isFullWidth","variant","onChange","event","target","History","maxW","borderWidth","rounded","mt","lineHeight","d","pb","color","letterSpacing","textTransform","ml","List","styleType","historyItem","number","array","s","item","indexOf","getSum","App","ThemeProvider","CSSReset","SimpleGrid","columns","spacing","WebFont","load","google","families","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.0030cc1e.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import { theme } from \"@chakra-ui/core\";\r\n\r\nexport const customTheme = {\r\n  ...theme,\r\n  fonts: {\r\n    heading: '\"Work Sans\", sans-serif',\r\n    body: \"Work Sans, sans-serif\",\r\n    mono: \"Work Sans\",\r\n  },\r\n};\r\n","import React, { createContext, useState } from \"react\";\r\n\r\nexport const sides = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"];\r\n\r\nexport const getRollDiceValues = (count: number): string[] => {\r\n  return Array.from(\r\n    { length: count },\r\n    () => sides[Math.floor(Math.random() * sides.length)]\r\n  );\r\n};\r\n\r\ntype InitialStateType = {\r\n  dice: string[];\r\n  roll: () => void;\r\n  count: number;\r\n  setCount: (count: number) => void;\r\n  isRolling: boolean;\r\n  history: string[][];\r\n};\r\n\r\nconst initialDice = getRollDiceValues(2);\r\n\r\nconst initialState = {\r\n  dice: initialDice,\r\n  roll: () => {},\r\n  count: 2,\r\n  setCount: () => {},\r\n  isRolling: false,\r\n  history: [initialDice],\r\n};\r\n\r\nexport const DiceContext = createContext<{ state: InitialStateType }>({\r\n  state: initialState,\r\n});\r\n\r\nexport const DiceProvider = (props: any) => {\r\n  const [isRolling, setIsRolling] = useState(false);\r\n  const [history, setHistory] = useState([initialDice]);\r\n  const [dice, setDice] = useState(initialDice);\r\n  const [count, setCount] = useState(2);\r\n\r\n  let animateRolling = () => {\r\n    setIsRolling(true);\r\n    setTimeout(() => {\r\n      setIsRolling(false);\r\n    }, 1000);\r\n  };\r\n\r\n  let roll = (): void => {\r\n    const newDice = getRollDiceValues(count);\r\n    setDice(newDice);\r\n    setHistory([...history.map((h) => h), newDice]);\r\n    animateRolling();\r\n  };\r\n\r\n  return (\r\n    <DiceContext.Provider\r\n      value={{\r\n        state: { dice, roll, count, setCount, isRolling, history },\r\n      }}\r\n    >\r\n      {props.children}\r\n    </DiceContext.Provider>\r\n  );\r\n};\r\n","import React, { useContext } from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { library, IconName } from \"@fortawesome/fontawesome-svg-core\";\r\nimport {\r\n  faDiceOne,\r\n  faDiceTwo,\r\n  faDiceThree,\r\n  faDiceFour,\r\n  faDiceFive,\r\n  faDiceSix,\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nimport \"./Die.css\";\r\nimport { DiceContext } from \"../../contexts/DiceContext\";\r\n\r\nlibrary.add(\r\n  faDiceOne,\r\n  faDiceTwo,\r\n  faDiceThree,\r\n  faDiceFour,\r\n  faDiceFive,\r\n  faDiceSix\r\n);\r\n\r\nconst Die = (props: { face: string }) => {\r\n  const { state } = useContext(DiceContext);\r\n\r\n  return (\r\n    <FontAwesomeIcon\r\n      className={state.isRolling ? \"shaking\" : \"\"}\r\n      icon={[\"fas\", `dice-${props.face}` as IconName]}\r\n      size=\"10x\"\r\n    />\r\n  );\r\n};\r\n\r\nexport default Die;\r\n","import React, { Fragment, useContext } from \"react\";\r\nimport { Box, Button, Flex } from \"@chakra-ui/core\";\r\nimport Die from \"./Die/Die\";\r\nimport { DiceContext } from \"../contexts/DiceContext\";\r\n\r\nconst RollDice = () => {\r\n  const { state } = useContext(DiceContext);\r\n\r\n  return (\r\n    <Fragment>\r\n      <Flex align=\"center\" justify=\"center\" wrap=\"wrap\">\r\n        {state.dice.map((dieFace: string, index: number) => {\r\n          return (\r\n            <Box key={index} p={5}>\r\n              <Die key={index} face={dieFace} />\r\n            </Box>\r\n          );\r\n        })}\r\n      </Flex>\r\n      <Flex align=\"center\" justify=\"center\">\r\n        <Button\r\n          variantColor=\"green\"\r\n          onClick={state.roll}\r\n          isLoading={state.isRolling}\r\n          loadingText=\"Dobás...\"\r\n        >\r\n          Dobok!\r\n        </Button>\r\n      </Flex>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default RollDice;\r\n","import React, { useContext } from \"react\";\r\nimport { Box, Input, Text } from \"@chakra-ui/core\";\r\nimport { DiceContext } from \"../contexts/DiceContext\";\r\n\r\nexport const Nav = () => {\r\n  const { state } = useContext(DiceContext);\r\n\r\n  return (\r\n    <Box\r\n      display=\"grid\"\r\n      alignItems=\"center\"\r\n      justifyContent=\"center\"\r\n      gridGap={2}\r\n      gridAutoFlow=\"column dense\"\r\n    >\r\n      <Text fontSize=\"6xl\" fontWeight=\"bold\" textAlign=\"center\">\r\n        {\"< 🎲={\"}\r\n      </Text>\r\n      <Input\r\n        id=\"count\"\r\n        type=\"number\"\r\n        min=\"1\"\r\n        max=\"9\"\r\n        width={50}\r\n        isFullWidth={false}\r\n        variant=\"filled\"\r\n        size=\"lg\"\r\n        value={state.count}\r\n        onChange={(event: any) => {\r\n          state.setCount(event.target.value);\r\n        }}\r\n      />\r\n      <Text fontSize=\"6xl\" fontWeight=\"bold\" textAlign=\"center\">\r\n        {\"} Kockadobás />\"}\r\n      </Text>\r\n    </Box>\r\n  );\r\n};\r\n","import { Box, List, ListItem } from \"@chakra-ui/core\";\r\nimport React, { useContext } from \"react\";\r\nimport { DiceContext, sides } from \"../contexts/DiceContext\";\r\n\r\nexport const History = () => {\r\n  const { state } = useContext(DiceContext);\r\n\r\n  const getSum = (array: string[]): number => {\r\n    let s = 0;\r\n    array.map((item) => {\r\n      return (s += sides.indexOf(item) + 1);\r\n    });\r\n    return s;\r\n  };\r\n\r\n  return (\r\n    <Box maxW=\"sm\" borderWidth=\"1px\" rounded=\"lg\" mt={6}>\r\n      <Box p=\"5\">\r\n        <Box mt=\"1\" fontWeight=\"semibold\" fontSize=\"lg\" lineHeight=\"tight\">\r\n          Előzmények\r\n        </Box>\r\n\r\n        <Box d=\"flex\" alignItems=\"baseline\" pb={3}>\r\n          <Box\r\n            color=\"gray.500\"\r\n            fontWeight=\"semibold\"\r\n            letterSpacing=\"wide\"\r\n            fontSize=\"xs\"\r\n            textTransform=\"uppercase\"\r\n            ml=\"2\"\r\n          >\r\n            {state.history.length} darab\r\n          </Box>\r\n        </Box>\r\n\r\n        <Box>\r\n          <List styleType=\"disc\">\r\n            {state.history.map((historyItem: string[], index: number) => {\r\n              return (\r\n                <ListItem key={index}>\r\n                  {historyItem.map((number, index) => {\r\n                    return (\r\n                      number +\r\n                      (index !== historyItem.length - 1\r\n                        ? \" + \"\r\n                        : ` = ${getSum(historyItem)}`)\r\n                    );\r\n                  })}\r\n                </ListItem>\r\n              );\r\n            })}\r\n          </List>\r\n        </Box>\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { Box, CSSReset, SimpleGrid, ThemeProvider } from \"@chakra-ui/core\";\r\nimport { customTheme } from \"./theme\";\r\nimport RollDice from \"./components/RollDice\";\r\nimport { DiceProvider } from \"./contexts/DiceContext\";\r\nimport { Nav } from \"./components/Nav\";\r\nimport { History } from \"./components/History\";\r\n\r\nexport const App = () => {\r\n  return (\r\n    <ThemeProvider theme={customTheme}>\r\n      <CSSReset />\r\n      <Box\r\n        display=\"grid\"\r\n        gridGap={2}\r\n        gridAutoFlow=\"row\"\r\n        justifyContent=\"center\"\r\n        p={10}\r\n      >\r\n        <DiceProvider>\r\n          <Nav />\r\n          <SimpleGrid columns={2} spacing={10}>\r\n            <Box>\r\n              <RollDice />\r\n            </Box>\r\n            <Box>\r\n              <History />\r\n            </Box>\r\n          </SimpleGrid>\r\n        </DiceProvider>\r\n      </Box>\r\n    </ThemeProvider>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport WebFont from \"webfontloader\";\r\nimport { App } from \"./App\";\r\n\r\nWebFont.load({\r\n  google: {\r\n    families: [\"Work Sans\"],\r\n  },\r\n});\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}